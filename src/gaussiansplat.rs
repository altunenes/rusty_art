use nannou::prelude::*;
use nannou_egui::{self, egui, Egui};
struct Model {
    render_pipeline: wgpu::RenderPipeline,
    vertex_buffer: wgpu::Buffer,
    time_uniform: wgpu::Buffer,
    time_bind_group: wgpu::BindGroup,
    params_uniform: wgpu::Buffer,
    params_bind_group: wgpu::BindGroup,
    data_bind_group: wgpu::BindGroup,
    settings:Settings,
    egui:Egui,
}
struct Settings {
    lambda: f32,
    theta: f32,
    alpha:f32,
    sigma: f32,
    gamma:f32,
    blue:f32,
    show_ui: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
struct Vertex {
    position: [f32; 2],
}
const VERTICES: [Vertex; 6] = [
    Vertex { position: [-1.0, -1.0] },
    Vertex { position: [ 1.0, -1.0] },
    Vertex { position: [-1.0,  1.0] },
    Vertex { position: [ 1.0, -1.0] },
    Vertex { position: [ 1.0,  1.0] },
    Vertex { position: [-1.0,  1.0] },
];
fn main() {
    nannou::app(model)
        .update(update) 
        .run();
}
fn update(app: &App, model: &mut Model, update: Update) {
    let egui = &mut model.egui;
    egui.set_elapsed_time(update.since_start);
    let ctx = egui.begin_frame();
    if app.keys.down.contains(&Key::H) {
        model.settings.show_ui = !model.settings.show_ui;
    }
    egui::Window::new("Shader Settings").show(&ctx, |ui| {
        ui.add(egui::Slider::new(&mut model.settings.lambda, -5.0..=5.0).text("l"));
        ui.add(egui::Slider::new(&mut model.settings.theta, 128.0..=1024.5).text("t"));
        ui.add(egui::Slider::new(&mut model.settings.alpha, 13.0..=15.0).text("a"));
        ui.add(egui::Slider::new(&mut model.settings.sigma, 0.0..=0.5).text("r"));
        ui.add(egui::Slider::new(&mut model.settings.gamma, -5.0..=20.0).text("g"));
        ui.add(egui::Slider::new(&mut model.settings.blue, -PI..=20.0).text("b"));

    });
    let params_data = [model.settings.lambda, model.settings.theta,model.settings.alpha, model.settings.sigma,model.settings.gamma,model.settings.blue];
    let params_bytes = bytemuck::cast_slice(&params_data);
    app.main_window().queue().write_buffer(&model.params_uniform, 0, &params_bytes);
}
fn raw_window_event(app: &App, model: &mut Model, event: &nannou::winit::event::WindowEvent) {
    model.egui.handle_raw_event(event);
    if let nannou::winit::event::WindowEvent::KeyboardInput { input, .. } = event {
        if let (Some(nannou::winit::event::VirtualKeyCode::F), true) =
            (input.virtual_keycode, input.state == nannou::winit::event::ElementState::Pressed)
        {
            let window = app.main_window();
            let fullscreen = window.fullscreen().is_some();
            window.set_fullscreen(!fullscreen);
        }
    }
}
fn model(app: &App) -> Model {
    let w_id = app.new_window().raw_event(raw_window_event).
    size(512, 512).view(view).build().unwrap();
    let window = app.window(w_id).unwrap();
    let device = window.device();
    let format = Frame::TEXTURE_FORMAT;
    let sample_count = window.msaa_samples();
    let vs_desc = wgpu::include_wgsl!("../shaders/vs.wgsl");
    let fs_desc = wgpu::include_wgsl!("../shaders/gaussiansplat.wgsl");
    let vs_mod = device.create_shader_module(vs_desc);
    let fs_mod = device.create_shader_module(fs_desc);
    let vertices_bytes = vertices_as_bytes(&VERTICES[..]);
    let usage = wgpu::BufferUsages::VERTEX;
    let vertex_buffer = device.create_buffer_init(&BufferInitDescriptor {
        label: None,
        contents: vertices_bytes,
        usage,
    });
    let data_array: [u32; 1458] = [
        0x0582c000u32,
        0x16160083u32,
        0x00e16e83u32,
        0x1102c000u32,
        0x16160088u32,
        0x00e36f88u32,
        0x1c82c000u32,
        0x1616006bu32,
        0x00cf626bu32,
        0x2802c000u32,
        0x16160046u32,
        0x00ae5346u32,
        0x3382c000u32,
        0x1616004du32,
        0x00b7544du32,
        0x3f02c000u32,
        0x1616005eu32,
        0x00ca5b5eu32,
        0x4a82c000u32,
        0x16160062u32,
        0x00ce5f62u32,
        0x5602c000u32,
        0x16160064u32,
        0x00d16064u32,
        0x6182c000u32,
        0x16160064u32,
        0x00d06164u32,
        0x6d02c000u32,
        0x16160064u32,
        0x00cd6164u32,
        0x7882c000u32,
        0x16160064u32,
        0x00cf6064u32,
        0x8402c000u32,
        0x16160062u32,
        0x00cd6062u32,
        0x8f82c000u32,
        0x16160060u32,
        0x00cb5f60u32,
        0x9b02c000u32,
        0x16160058u32,
        0x00bd5d58u32,
        0xa682c000u32,
        0x1616006fu32,
        0x00ce696fu32,
        0xb202c000u32,
        0x16160084u32,
        0x00e06e84u32,
        0xbd82c000u32,
        0x16160081u32,
        0x00df6981u32,
        0xc902c000u32,
        0x16160092u32,
        0x00e17592u32,
        0xd482c000u32,
        0x16160094u32,
        0x00d67a94u32,
        0xe0028000u32,
        0x1716605au32,
        0x00bb5d5au32,
        0xec02c000u32,
        0x1817615eu32,
        0x00c35e5eu32,
        0xf902c000u32,
        0x19175b46u32,
        0x009f5446u32,
        0xe0884000u32,
        0x1718005eu32,
        0x00bd5e5eu32,
        0xec884000u32,
        0x18186844u32,
        0x009f5344u32,
        0x05888000u32,
        0x16160087u32,
        0x00e46e87u32,
        0x11088000u32,
        0x1616008au32,
        0x00e56d8au32,
        0x1c888000u32,
        0x16160066u32,
        0x00ce5c66u32,
        0x28088000u32,
        0x16160043u32,
        0x00ae4f43u32,
        0x33888000u32,
        0x1616004bu32,
        0x00b7514bu32,
        0x3f088000u32,
        0x1616005bu32,
        0x00c9595bu32,
        0x4a888000u32,
        0x1616005eu32,
        0x00ce5e5eu32,
        0x56088000u32,
        0x1616005fu32,
        0x00d05e5fu32,
        0x61888000u32,
        0x1616005eu32,
        0x00d15e5eu32,
        0x6d088000u32,
        0x1616005bu32,
        0x00cb5b5bu32,
        0x78888000u32,
        0x1616005du32,
        0x00c95d5du32,
        0x84088000u32,
        0x16160060u32,
        0x00cc6060u32,
        0x8f888000u32,
        0x1616005du32,
        0x00cc5c5du32,
        0x9b088000u32,
        0x16160058u32,
        0x00c45d58u32,
        0xa6888000u32,
        0x16160060u32,
        0x00c76560u32,
        0xb2088000u32,
        0x16160084u32,
        0x00df7284u32,
        0xbd888000u32,
        0x16160082u32,
        0x00e06c82u32,
        0xc9088000u32,
        0x1616007cu32,
        0x00db6b7cu32,
        0xd4888000u32,
        0x18174cb1u32,
        0x00ec86b1u32,
        0xf9088000u32,
        0x19160018u32,
        0x00604018u32,
        0xdf8e0000u32,
        0x1619009bu32,
        0x00d6809bu32,
        0xeb8e4000u32,
        0x19180019u32,
        0x00614019u32,
        0x058e4000u32,
        0x16160081u32,
        0x00e36881u32,
        0x110e4000u32,
        0x16160079u32,
        0x00df6379u32,
        0x1c8e4000u32,
        0x16160066u32,
        0x00cf5b66u32,
        0x280e4000u32,
        0x1616003eu32,
        0x00a94c3eu32,
        0x338e4000u32,
        0x1616004au32,
        0x00b9514au32,
        0x3f0e4000u32,
        0x16160058u32,
        0x00ca5758u32,
        0x4a8e4000u32,
        0x1616005du32,
        0x00cf5c5du32,
        0x558e0000u32,
        0x1616875fu32,
        0x00c9645fu32,
        0x608d4000u32,
        0x16136d6du32,
        0x00c6746du32,
        0x6d8d4000u32,
        0x16164192u32,
        0x00cc8f92u32,
        0x788e4000u32,
        0x161600a4u32,
        0x00d298a4u32,
        0x840e4000u32,
        0x1616008cu32,
        0x00d0858cu32,
        0x8f8e4000u32,
        0x16171d5bu32,
        0x00c5615bu32,
        0x9b0e4000u32,
        0x16160052u32,
        0x00c15a52u32,
        0xa68e4000u32,
        0x1616005bu32,
        0x00c65f5bu32,
        0xb20e4000u32,
        0x16160077u32,
        0x00da6e77u32,
        0xbd8e4000u32,
        0x16160078u32,
        0x00dd6878u32,
        0xc90e4000u32,
        0x16160072u32,
        0x00da6372u32,
        0xd40e4000u32,
        0x1616007eu32,
        0x00dc697eu32,
        0xf90e0000u32,
        0x1a160017u32,
        0x005e3e17u32,
        0xe0940000u32,
        0x1818001eu32,
        0x0068421eu32,
        0xec93c000u32,
        0x18177418u32,
        0x00604018u32,
        0x05940000u32,
        0x16160054u32,
        0x00be5454u32,
        0x11140000u32,
        0x16160076u32,
        0x00db6376u32,
        0x1c940000u32,
        0x16160063u32,
        0x00cc5963u32,
        0x28140000u32,
        0x1616003du32,
        0x00a54e3du32,
        0x33940000u32,
        0x16160048u32,
        0x00b35248u32,
        0x3f140000u32,
        0x16160054u32,
        0x00c55754u32,
        0x4a940000u32,
        0x16160055u32,
        0x00c65755u32,
        0x54934000u32,
        0x16160056u32,
        0x00bd5d56u32,
        0x61940000u32,
        0x16168f67u32,
        0x00c36c67u32,
        0x6c940000u32,
        0x1616227au32,
        0x00c97a7au32,
        0x7893c000u32,
        0x161600a9u32,
        0x00d89ca9u32,
        0x84140000u32,
        0x161600bcu32,
        0x00deaebcu32,
        0x8f140000u32,
        0x171636b9u32,
        0x00dbafb9u32,
        0x9b13c000u32,
        0x1717004bu32,
        0x00ad584bu32,
        0xa6940000u32,
        0x1616005au32,
        0x00c55f5au32,
        0xb2140000u32,
        0x1616006fu32,
        0x00d8686fu32,
        0xbd940000u32,
        0x1616005fu32,
        0x00c95f5fu32,
        0xc9140000u32,
        0x16160071u32,
        0x00dd6471u32,
        0xd493c000u32,
        0x18177b70u32,
        0x00da6670u32,
        0xf913c000u32,
        0x19176639u32,
        0x00805439u32,
        0x9a994000u32,
        0x16175aaeu32,
        0x00d2a8aeu32,
        0xd5198000u32,
        0x16178c34u32,
        0x008c4c34u32,
        0xf9998000u32,
        0x1917007eu32,
        0x00c8797eu32,
        0x0599c000u32,
        0x16160039u32,
        0x00a14a39u32,
        0x1119c000u32,
        0x16160073u32,
        0x00d86473u32,
        0x1c99c000u32,
        0x16160064u32,
        0x00cb5d64u32,
        0x2819c000u32,
        0x1616003du32,
        0x00a54d3du32,
        0x3399c000u32,
        0x16160047u32,
        0x00b35147u32,
        0x3e998000u32,
        0x16160059u32,
        0x00c65a59u32,
        0x4b1a4000u32,
        0x1613004du32,
        0x00ba564du32,
        0x5619c000u32,
        0x1616835au32,
        0x00c0615au32,
        0x6199c000u32,
        0x1616006cu32,
        0x00ca6e6cu32,
        0x6d19c000u32,
        0x16160079u32,
        0x00ca7979u32,
        0x771a0000u32,
        0x161629abu32,
        0x00da9fabu32,
        0x84198000u32,
        0x161641bfu32,
        0x00e0b4bfu32,
        0x8f99c000u32,
        0x161600c6u32,
        0x00e2bbc6u32,
        0xa6198000u32,
        0x17160055u32,
        0x00bb5b55u32,
        0xb219c000u32,
        0x16160070u32,
        0x00d86a70u32,
        0xbd19c000u32,
        0x16170028u32,
        0x00814428u32,
        0xc919c000u32,
        0x17160078u32,
        0x00dc6f78u32,
        0xe099c000u32,
        0x18160019u32,
        0x00634019u32,
        0xec998000u32,
        0x18176f27u32,
        0x006e4c27u32,
        0xed1f8000u32,
        0x18170069u32,
        0x00b57269u32,
        0x059f8000u32,
        0x1616003du32,
        0x00a54b3du32,
        0x111f8000u32,
        0x16160072u32,
        0x00d86372u32,
        0x1c9f8000u32,
        0x16160065u32,
        0x00cb5d65u32,
        0x281f8000u32,
        0x1616003bu32,
        0x00a44b3bu32,
        0x339f8000u32,
        0x16160046u32,
        0x00b44f46u32,
        0x3c1f0000u32,
        0x0f160063u32,
        0x00c66163u32,
        0x419fc000u32,
        0x0e16a469u32,
        0x00cb6069u32,
        0x4a9f8000u32,
        0x1616004cu32,
        0x00ba554cu32,
        0x561f8000u32,
        0x1616005du32,
        0x00c5635du32,
        0x619f8000u32,
        0x1616006cu32,
        0x00c86e6cu32,
        0x6c9f4000u32,
        0x16160099u32,
        0x00d89199u32,
        0x779f0000u32,
        0x16158ea9u32,
        0x00db9ea9u32,
        0x859f0000u32,
        0x161600b6u32,
        0x00deacb6u32,
        0x8f200000u32,
        0x16154cbau32,
        0x00ddb0bau32,
        0x9b1f8000u32,
        0x161687c5u32,
        0x00dfbbc5u32,
        0xa81ec000u32,
        0x1416216eu32,
        0x00c96b6eu32,
        0xb19f4000u32,
        0x16160072u32,
        0x00d66872u32,
        0xbd9f8000u32,
        0x1616007fu32,
        0x00aa877fu32,
        0xc91f8000u32,
        0x171600cdu32,
        0x00e7bfcdu32,
        0xd51f8000u32,
        0x1616002fu32,
        0x006c512fu32,
        0xe09f4000u32,
        0x18166417u32,
        0x00603f17u32,
        0xf99f8000u32,
        0x18165a88u32,
        0x00d37c88u32,
        0xe0250000u32,
        0x18187633u32,
        0x00815433u32,
        0x05a54000u32,
        0x16160041u32,
        0x00ac4d41u32,
        0x11254000u32,
        0x16160077u32,
        0x00dc6377u32,
        0x1ca54000u32,
        0x1616006bu32,
        0x00d05f6bu32,
        0x28254000u32,
        0x1616003cu32,
        0x00a74b3cu32,
        0x33a54000u32,
        0x16160043u32,
        0x00b24c43u32,
        0x40a54000u32,
        0x1016ae84u32,
        0x00df6a84u32,
        0x4aa54000u32,
        0x1616004bu32,
        0x00ba544bu32,
        0x56254000u32,
        0x16160060u32,
        0x00c76660u32,
        0x61a54000u32,
        0x16160075u32,
        0x00d07475u32,
        0x6aa4c000u32,
        0x11160089u32,
        0x00d58689u32,
        0x78a54000u32,
        0x16160098u32,
        0x00d99098u32,
        0x83a54000u32,
        0x1616009cu32,
        0x00d9949cu32,
        0x8ea5c000u32,
        0x14125fa6u32,
        0x00d89ea6u32,
        0x9b254000u32,
        0x161600aau32,
        0x00d7a4aau32,
        0xa6254000u32,
        0x161600b0u32,
        0x00d7a6b0u32,
        0xb2254000u32,
        0x16167cbcu32,
        0x00dfadbcu32,
        0xbc258000u32,
        0x161627c1u32,
        0x00e0b4c1u32,
        0xc9250000u32,
        0x171679bbu32,
        0x00e0aebbu32,
        0xd4a54000u32,
        0x17168b1fu32,
        0x0061451fu32,
        0xec254000u32,
        0x19160086u32,
        0x00d37f86u32,
        0xf9254000u32,
        0x19160087u32,
        0x00d27c87u32,
        0xcaaa8000u32,
        0x14170268u32,
        0x00a07368u32,
        0xe0aac000u32,
        0x17170072u32,
        0x00c27872u32,
        0x05ab0000u32,
        0x16160040u32,
        0x00ab4d40u32,
        0x112b0000u32,
        0x16160079u32,
        0x00df6479u32,
        0x1cab0000u32,
        0x1616006cu32,
        0x00d0606cu32,
        0x282b0000u32,
        0x1616003bu32,
        0x00a64b3bu32,
        0x33ab0000u32,
        0x1616003fu32,
        0x00ae493fu32,
        0x40aac000u32,
        0x1016079au32,
        0x00ec719au32,
        0x4aaac000u32,
        0x1616545cu32,
        0x00c95b5cu32,
        0x562b0000u32,
        0x16160064u32,
        0x00c86a64u32,
        0x61ab0000u32,
        0x1616006cu32,
        0x00cb706cu32,
        0x6cab4000u32,
        0x1616006au32,
        0x00c17a6au32,
        0x782bc000u32,
        0x16105361u32,
        0x00a78161u32,
        0x842bc000u32,
        0x160f005du32,
        0x00a1795du32,
        0x8fab4000u32,
        0x16167a6cu32,
        0x00ae7c6cu32,
        0x9b2b0000u32,
        0x161600a7u32,
        0x00da9ba7u32,
        0xa6ab0000u32,
        0x161600b8u32,
        0x00dda9b8u32,
        0xb22b0000u32,
        0x161600bfu32,
        0x00dfb2bfu32,
        0xbdab0000u32,
        0x16160093u32,
        0x00ca8e93u32,
        0xd4ab0000u32,
        0x18160019u32,
        0x005f4119u32,
        0xecab0000u32,
        0x17160088u32,
        0x00d37e88u32,
        0xf92b0000u32,
        0x19160086u32,
        0x00d07b86u32,
        0xc930c000u32,
        0x17178b18u32,
        0x00623e18u32,
        0x05b0c000u32,
        0x16160045u32,
        0x00b15045u32,
        0x1130c000u32,
        0x16160079u32,
        0x00df6479u32,
        0x1cb0c000u32,
        0x1616006eu32,
        0x00d15f6eu32,
        0x2830c000u32,
        0x1616003au32,
        0x00a54a3au32,
        0x33b0c000u32,
        0x16160040u32,
        0x00b04a40u32,
        0x3db10000u32,
        0x1616227du32,
        0x00cf6c7du32,
        0x4ab04000u32,
        0x16160069u32,
        0x00cc6869u32,
        0x56308000u32,
        0x16162a5eu32,
        0x00c4695eu32,
        0x61b0c000u32,
        0x16160056u32,
        0x00b46b56u32,
        0x6d30c000u32,
        0x16160033u32,
        0x007c6033u32,
        0x78b0c000u32,
        0x16160030u32,
        0x00736330u32,
        0x83b08000u32,
        0x17178b3fu32,
        0x00796d3fu32,
        0x8f30c000u32,
        0x17160097u32,
        0x00ca9197u32,
        0x9b30c000u32,
        0x161600aeu32,
        0x00d7a0aeu32,
        0xa6b0c000u32,
        0x1616009eu32,
        0x00cc989eu32,
        0xb230c000u32,
        0x16160071u32,
        0x00b47c71u32,
        0xbcb04000u32,
        0x17168785u32,
        0x00d27985u32,
        0xd430c000u32,
        0x17178a31u32,
        0x007a5131u32,
        0xe030c000u32,
        0x1716008bu32,
        0x00d3808bu32,
        0xecb0c000u32,
        0x18165a8bu32,
        0x00d1828bu32,
        0xf930c000u32,
        0x19160086u32,
        0x00cd7e86u32,
        0x84368000u32,
        0x1717008au32,
        0x00be958au32,
        0xbe368000u32,
        0x15179917u32,
        0x00623f17u32,
        0xd4b68000u32,
        0x1617965cu32,
        0x00a4695cu32,
        0x05b68000u32,
        0x16160045u32,
        0x00af5045u32,
        0x11368000u32,
        0x16160075u32,
        0x00d86575u32,
        0x1cb68000u32,
        0x16160070u32,
        0x00d26370u32,
        0x28368000u32,
        0x1616003au32,
        0x00a44b3au32,
        0x33b68000u32,
        0x16160045u32,
        0x00b44f45u32,
        0x3eb64000u32,
        0x1616896du32,
        0x00cb656du32,
        0x4ab68000u32,
        0x16160061u32,
        0x00c66261u32,
        0x56368000u32,
        0x1616004bu32,
        0x00aa634bu32,
        0x61b68000u32,
        0x16160028u32,
        0x00715528u32,
        0x6d368000u32,
        0x1616002du32,
        0x006e5f2du32,
        0x78364000u32,
        0x1717832bu32,
        0x0071512bu32,
        0x8fb68000u32,
        0x1616009cu32,
        0x00d3949cu32,
        0x9b368000u32,
        0x161600acu32,
        0x00e2a1acu32,
        0xa6b68000u32,
        0x1616009cu32,
        0x00e1959cu32,
        0xb2368000u32,
        0x1616004cu32,
        0x0095674cu32,
        0xc9364000u32,
        0x17166819u32,
        0x00643e19u32,
        0xe0368000u32,
        0x1716008du32,
        0x00d0808du32,
        0xecb68000u32,
        0x18165a8eu32,
        0x00d2818eu32,
        0xf9368000u32,
        0x19160087u32,
        0x00ce7e87u32,
        0x78bc4000u32,
        0x17170086u32,
        0x00ca8386u32,
        0x05bc4000u32,
        0x16160042u32,
        0x00ad4e42u32,
        0x113c4000u32,
        0x16160074u32,
        0x00d66774u32,
        0x1cbc4000u32,
        0x16160072u32,
        0x00d26572u32,
        0x283c4000u32,
        0x1616003eu32,
        0x00a6503eu32,
        0x33bc4000u32,
        0x16160047u32,
        0x00b75147u32,
        0x3dbbc000u32,
        0x15160059u32,
        0x00c95a59u32,
        0x4abc4000u32,
        0x16160053u32,
        0x00b26553u32,
        0x563c4000u32,
        0x16160025u32,
        0x00695525u32,
        0x61bc4000u32,
        0x1616001fu32,
        0x00644d1fu32,
        0x6cbc0000u32,
        0x1717882bu32,
        0x006d582bu32,
        0x843c4000u32,
        0x1616008du32,
        0x00ce8c8du32,
        0x8fbc4000u32,
        0x1616007fu32,
        0x00d67f7fu32,
        0x9b3c4000u32,
        0x161600acu32,
        0x00ec9eacu32,
        0xa63c0000u32,
        0x161700aeu32,
        0x00eaa0aeu32,
        0xb1bc4000u32,
        0x17167836u32,
        0x00875336u32,
        0xbebc0000u32,
        0x13160f21u32,
        0x00694621u32,
        0xc93c4000u32,
        0x16160022u32,
        0x006a4622u32,
        0xd4bc4000u32,
        0x16160080u32,
        0x00c87980u32,
        0xe03c4000u32,
        0x1716008cu32,
        0x00ce7e8cu32,
        0xecbc4000u32,
        0x18165a84u32,
        0x00c57d84u32,
        0xf93c4000u32,
        0x1916007eu32,
        0x00c47b7eu32,
        0x6d420000u32,
        0x1617936au32,
        0x00ab726au32,
        0xa6c1c000u32,
        0x16179145u32,
        0x00995e45u32,
        0x05c20000u32,
        0x1616003eu32,
        0x00a74c3eu32,
        0x11420000u32,
        0x16160071u32,
        0x00d36371u32,
        0x1cc20000u32,
        0x16160075u32,
        0x00d56675u32,
        0x28420000u32,
        0x1616003du32,
        0x00aa4b3du32,
        0x32414000u32,
        0x16160044u32,
        0x00ae5044u32,
        0x3f420000u32,
        0x1616835du32,
        0x00b1665du32,
        0x4a420000u32,
        0x17167732u32,
        0x00736332u32,
        0x56420000u32,
        0x1616002cu32,
        0x006a5c2cu32,
        0x61c1c000u32,
        0x17166c1bu32,
        0x005f461bu32,
        0x78c20000u32,
        0x1616007du32,
        0x00c37c7du32,
        0x84420000u32,
        0x16160045u32,
        0x00995c45u32,
        0x8fc20000u32,
        0x16160054u32,
        0x00be6154u32,
        0x9b420000u32,
        0x16160091u32,
        0x00e28c91u32,
        0xb2420000u32,
        0x16160024u32,
        0x00734724u32,
        0xbfc1c000u32,
        0x0f16061fu32,
        0x0068431fu32,
        0xc9420000u32,
        0x1616003du32,
        0x0086563du32,
        0xd4c20000u32,
        0x16160085u32,
        0x00cf7985u32,
        0xe0420000u32,
        0x17160085u32,
        0x00cf7985u32,
        0xecc20000u32,
        0x18165a82u32,
        0x00c87a82u32,
        0xf9420000u32,
        0x1916007cu32,
        0x00bc7c7cu32,
        0x3f478000u32,
        0x1617963cu32,
        0x0075713cu32,
        0x05c7c000u32,
        0x16160035u32,
        0x009a4935u32,
        0x1147c000u32,
        0x1616006cu32,
        0x00cc626cu32,
        0x1cc7c000u32,
        0x16160079u32,
        0x00d96779u32,
        0x27c78000u32,
        0x16168d47u32,
        0x00b45547u32,
        0x33c7c000u32,
        0x1616004du32,
        0x0093724du32,
        0x4ac7c000u32,
        0x1616002du32,
        0x0069612du32,
        0x5647c000u32,
        0x16160035u32,
        0x00735e35u32,
        0x61c7c000u32,
        0x1616002cu32,
        0x00734c2cu32,
        0x6d47c000u32,
        0x16160079u32,
        0x00c07779u32,
        0x78c7c000u32,
        0x1616006cu32,
        0x00da716cu32,
        0x8447c000u32,
        0x16160083u32,
        0x00de8483u32,
        0x8fc7c000u32,
        0x16160073u32,
        0x00db7873u32,
        0x9b47c000u32,
        0x16160095u32,
        0x00e49495u32,
        0xa6c7c000u32,
        0x16160060u32,
        0x00cb6960u32,
        0xb247c000u32,
        0x16160023u32,
        0x00774523u32,
        0xbb480000u32,
        0x10160056u32,
        0x009d6a56u32,
        0xc947c000u32,
        0x1616005du32,
        0x00a8665du32,
        0xd4c7c000u32,
        0x16160083u32,
        0x00cb7a83u32,
        0xe047c000u32,
        0x1716007fu32,
        0x00c6787fu32,
        0xec47c000u32,
        0x18175d86u32,
        0x00c77a86u32,
        0xf947c000u32,
        0x191600b2u32,
        0x00e686b2u32,
        0x05cd8000u32,
        0x16160029u32,
        0x00844629u32,
        0x114d8000u32,
        0x16160066u32,
        0x00c56166u32,
        0x1ccd8000u32,
        0x16160075u32,
        0x00d76575u32,
        0x264d4000u32,
        0x12160049u32,
        0x00ac6249u32,
        0x33cd8000u32,
        0x16160040u32,
        0x007d7440u32,
        0x3f4d8000u32,
        0x16160040u32,
        0x00747440u32,
        0x4acd8000u32,
        0x1616001fu32,
        0x0065461fu32,
        0x564d8000u32,
        0x1616003au32,
        0x0085543au32,
        0x61cd8000u32,
        0x1616005fu32,
        0x00a16a5fu32,
        0x6d4d8000u32,
        0x16160030u32,
        0x008c4830u32,
        0x78cd8000u32,
        0x16160065u32,
        0x00dd6965u32,
        0x844d8000u32,
        0x16160087u32,
        0x00e68187u32,
        0x8fcd8000u32,
        0x16160069u32,
        0x00db6a69u32,
        0x9b4d8000u32,
        0x1616008bu32,
        0x00e28a8bu32,
        0xa64d4000u32,
        0x16179267u32,
        0x00d26c67u32,
        0xb1cd8000u32,
        0x1716001bu32,
        0x006a401bu32,
        0xbc4d4000u32,
        0x11160050u32,
        0x00966450u32,
        0xc94d8000u32,
        0x1616007cu32,
        0x00c8727cu32,
        0xd4cd8000u32,
        0x16160082u32,
        0x00c97882u32,
        0xe04d4000u32,
        0x18166279u32,
        0x00bf7679u32,
        0xeccd8000u32,
        0x181600b1u32,
        0x00e881b1u32,
        0xf94d8000u32,
        0x191600c5u32,
        0x00ec9bc5u32,
        0xa6d34000u32,
        0x16179441u32,
        0x00995941u32,
        0x05d34000u32,
        0x16160028u32,
        0x00894228u32,
        0x11534000u32,
        0x16160071u32,
        0x00cf6b71u32,
        0x1cd34000u32,
        0x16160079u32,
        0x00d96979u32,
        0x25d30000u32,
        0x0e16003cu32,
        0x00a5513cu32,
        0x33d34000u32,
        0x16160035u32,
        0x00726835u32,
        0x3f534000u32,
        0x1616004bu32,
        0x007e804bu32,
        0x4ad34000u32,
        0x1616002fu32,
        0x0074542fu32,
        0x56534000u32,
        0x16160058u32,
        0x009c6a58u32,
        0x61d34000u32,
        0x16160038u32,
        0x007b5238u32,
        0x6d534000u32,
        0x16160034u32,
        0x00944b34u32,
        0x78d34000u32,
        0x1616005eu32,
        0x00dc615eu32,
        0x84534000u32,
        0x16160073u32,
        0x00e27373u32,
        0x8fd34000u32,
        0x16160070u32,
        0x00db7070u32,
        0x9b530000u32,
        0x17166a8fu32,
        0x00e08a8fu32,
        0xb2534000u32,
        0x16160022u32,
        0x00714222u32,
        0xbb530000u32,
        0x0e160053u32,
        0x009a6653u32,
        0xc9534000u32,
        0x16160083u32,
        0x00cc7683u32,
        0xd4d34000u32,
        0x1616007fu32,
        0x00c5787fu32,
        0xe0534000u32,
        0x17160082u32,
        0x00c77482u32,
        0xecd34000u32,
        0x18165ac3u32,
        0x00f091c3u32,
        0xf9534000u32,
        0x191600cbu32,
        0x00eda5cbu32,
        0x05d90000u32,
        0x1616001fu32,
        0x00773f1fu32,
        0x11590000u32,
        0x16160077u32,
        0x00d16e77u32,
        0x1cd90000u32,
        0x1616007du32,
        0x00d86f7du32,
        0x29d90000u32,
        0x1116a545u32,
        0x00986845u32,
        0x33d90000u32,
        0x1616002cu32,
        0x00685f2cu32,
        0x3f590000u32,
        0x1616004fu32,
        0x0080844fu32,
        0x4ad90000u32,
        0x1616006cu32,
        0x00ac876cu32,
        0x56590000u32,
        0x1616004du32,
        0x00905e4du32,
        0x61d90000u32,
        0x1616001bu32,
        0x00673e1bu32,
        0x6d590000u32,
        0x1616002bu32,
        0x0082452bu32,
        0x78d90000u32,
        0x16160054u32,
        0x00d05654u32,
        0x84590000u32,
        0x16160062u32,
        0x00d96362u32,
        0x8fd90000u32,
        0x1616005au32,
        0x00d8615au32,
        0x9ad8c000u32,
        0x16168c66u32,
        0x00d46f66u32,
        0xa6590000u32,
        0x1716001fu32,
        0x0068441fu32,
        0xb2590000u32,
        0x16160029u32,
        0x007c4429u32,
        0xc0590000u32,
        0x0b16b17bu32,
        0x00d06e7bu32,
        0xbad8c000u32,
        0x0b16003eu32,
        0x00875a3eu32,
        0xc9590000u32,
        0x16160086u32,
        0x00ca7886u32,
        0xd4d90000u32,
        0x16160080u32,
        0x00c27880u32,
        0xe0590000u32,
        0x16160088u32,
        0x00c97788u32,
        0xec590000u32,
        0x18165acdu32,
        0x00f1a1cdu32,
        0xf958c000u32,
        0x1a1600cdu32,
        0x00eea4cdu32,
        0xecde8000u32,
        0x181700ceu32,
        0x00f39fceu32,
        0x05dec000u32,
        0x1616001du32,
        0x006a401du32,
        0x115ec000u32,
        0x16160074u32,
        0x00d36974u32,
        0x1cdec000u32,
        0x16160079u32,
        0x00d66a79u32,
        0x28dec000u32,
        0x1516a13cu32,
        0x0083613cu32,
        0x33dec000u32,
        0x16160029u32,
        0x00645a29u32,
        0x3f5ec000u32,
        0x16160054u32,
        0x00838954u32,
        0x4adec000u32,
        0x16160063u32,
        0x009a8763u32,
        0x565ec000u32,
        0x16160020u32,
        0x00634720u32,
        0x61dec000u32,
        0x1616001au32,
        0x00623f1au32,
        0x6d5ec000u32,
        0x1616001eu32,
        0x006c3f1eu32,
        0x78dec000u32,
        0x16160030u32,
        0x00964430u32,
        0x845ec000u32,
        0x16160060u32,
        0x00cf6760u32,
        0x8fdec000u32,
        0x16160081u32,
        0x00e18181u32,
        0x9b5ec000u32,
        0x16172a53u32,
        0x00a56453u32,
        0xa6dec000u32,
        0x1617101du32,
        0x0061441du32,
        0xb25ec000u32,
        0x16160032u32,
        0x00864a32u32,
        0xbfdec000u32,
        0x0d16af80u32,
        0x00c97580u32,
        0xc95ec000u32,
        0x1616007fu32,
        0x00c1787fu32,
        0xd4dec000u32,
        0x1616007fu32,
        0x00bb7b7fu32,
        0xe05ec000u32,
        0x17160094u32,
        0x00c78294u32,
        0xf95e8000u32,
        0x19165fa0u32,
        0x00d582a0u32,
        0xf9644000u32,
        0x1a170033u32,
        0x008a4933u32,
        0x05e48000u32,
        0x16160049u32,
        0x008b6049u32,
        0x11648000u32,
        0x16160060u32,
        0x00bd5e60u32,
        0x1c644000u32,
        0x16169587u32,
        0x00de7787u32,
        0x28648000u32,
        0x16160029u32,
        0x006b5129u32,
        0x33e48000u32,
        0x1616002fu32,
        0x006d5d2fu32,
        0x3f648000u32,
        0x16160046u32,
        0x00787746u32,
        0x4ae48000u32,
        0x1616005cu32,
        0x008a8c5cu32,
        0x56648000u32,
        0x1616003du32,
        0x007a613du32,
        0x61e48000u32,
        0x1616001du32,
        0x0062441du32,
        0x6d648000u32,
        0x16160021u32,
        0x006a4421u32,
        0x78e48000u32,
        0x1616003du32,
        0x009e4f3du32,
        0x84648000u32,
        0x16160063u32,
        0x00d26763u32,
        0x8fe48000u32,
        0x16160076u32,
        0x00da7476u32,
        0x9ae48000u32,
        0x161600acu32,
        0x00e496acu32,
        0xa6648000u32,
        0x17163789u32,
        0x00b98889u32,
        0xb1e44000u32,
        0x17163431u32,
        0x007f4c31u32,
        0xbfe48000u32,
        0x0e16b278u32,
        0x00c47278u32,
        0xc9648000u32,
        0x1616006au32,
        0x00b56c6au32,
        0xd4e44000u32,
        0x1716005cu32,
        0x00a5645cu32,
        0xe0648000u32,
        0x17178292u32,
        0x00d07892u32,
        0xec644000u32,
        0x19187a9bu32,
        0x00d57d9bu32,
        0xedea4000u32,
        0x171a974au32,
        0x00a9524au32,
        0xb26a0000u32,
        0x16181d74u32,
        0x00ab7c74u32,
        0xe16a4000u32,
        0x191900beu32,
        0x00f08cbeu32,
        0x05ea4000u32,
        0x16160067u32,
        0x00977867u32,
        0x116a4000u32,
        0x16160061u32,
        0x00b85f61u32,
        0x1b6a0000u32,
        0x12160091u32,
        0x00e97491u32,
        0x286a4000u32,
        0x1616001bu32,
        0x005c451bu32,
        0x33ea4000u32,
        0x16160028u32,
        0x00665528u32,
        0x3f6a4000u32,
        0x16160025u32,
        0x00625525u32,
        0x4aea4000u32,
        0x16160052u32,
        0x00828552u32,
        0x566a4000u32,
        0x16160057u32,
        0x00877c57u32,
        0x61ea4000u32,
        0x1616001du32,
        0x0065411du32,
        0x6cea4000u32,
        0x16170029u32,
        0x007c4529u32,
        0x78ea4000u32,
        0x16160043u32,
        0x00ad5043u32,
        0x846a4000u32,
        0x16160065u32,
        0x00da6465u32,
        0x8fea4000u32,
        0x16160076u32,
        0x00de7076u32,
        0x9b6a4000u32,
        0x16160098u32,
        0x00e38698u32,
        0xa6ea4000u32,
        0x171649beu32,
        0x00eea6beu32,
        0xbeea4000u32,
        0x14169f7cu32,
        0x00c6717cu32,
        0xc96a4000u32,
        0x16160078u32,
        0x00bd7478u32,
        0xd4ea0000u32,
        0x18166577u32,
        0x00bc7077u32,
        0xf9ea4000u32,
        0x18165a47u32,
        0x00a25647u32,
        0xb1f00000u32,
        0x161900bau32,
        0x00e2aebau32,
        0x05f00000u32,
        0x16170058u32,
        0x00886d58u32,
        0x11700000u32,
        0x16170064u32,
        0x00b96064u32,
        0x1af00000u32,
        0x10170093u32,
        0x00e87593u32,
        0x28700000u32,
        0x1617001bu32,
        0x005d461bu32,
        0x33f00000u32,
        0x16170023u32,
        0x00614e23u32,
        0x3f700000u32,
        0x1617001fu32,
        0x005e4c1fu32,
        0x4af00000u32,
        0x16170047u32,
        0x00787947u32,
        0x56700000u32,
        0x16170045u32,
        0x007b6c45u32,
        0x61f00000u32,
        0x16170023u32,
        0x006b4523u32,
        0x6d700000u32,
        0x16179d40u32,
        0x00a74d40u32,
        0x78f00000u32,
        0x1617004du32,
        0x00ba564du32,
        0x84700000u32,
        0x16170068u32,
        0x00dd6368u32,
        0x8ff00000u32,
        0x1617006du32,
        0x00dc676du32,
        0x9b700000u32,
        0x16170089u32,
        0x00df7d89u32,
        0xa6f00000u32,
        0x161700b4u32,
        0x00e7a0b4u32,
        0xbe700000u32,
        0x15171275u32,
        0x00bd6d75u32,
        0xc9700000u32,
        0x16170079u32,
        0x00b97379u32,
        0xd4f00000u32,
        0x16170083u32,
        0x00ca7183u32,
        0xe0704000u32,
        0x171900adu32,
        0x00eb80adu32,
        0xec704000u32,
        0x19180043u32,
        0x00a94d43u32,
        0xf9700000u32,
        0x19175943u32,
        0x00975743u32,
        0x05f64000u32,
        0x1618005du32,
        0x00936e5du32,
        0x11764000u32,
        0x16180070u32,
        0x00c06870u32,
        0x1af60000u32,
        0x10180097u32,
        0x00ea7597u32,
        0x28764000u32,
        0x1618001cu32,
        0x005e461cu32,
        0x33f64000u32,
        0x16180021u32,
        0x005f4b21u32,
        0x3f764000u32,
        0x1618001du32,
        0x005c481du32,
        0x4af64000u32,
        0x16180042u32,
        0x00767242u32,
        0x56764000u32,
        0x16180027u32,
        0x00674e27u32,
        0x61764000u32,
        0x1619001fu32,
        0x00703d1fu32,
        0x6d764000u32,
        0x1618003fu32,
        0x00a84a3fu32,
        0x78f64000u32,
        0x16180060u32,
        0x00d35e60u32,
        0x84764000u32,
        0x1618006bu32,
        0x00df656bu32,
        0x8ff64000u32,
        0x16180069u32,
        0x00dc6169u32,
        0x9b764000u32,
        0x1618007bu32,
        0x00dd6f7bu32,
        0xa6f64000u32,
        0x161800a2u32,
        0x00e38fa2u32,
        0xb2764000u32,
        0x171807c7u32,
        0x00eeb8c7u32,
        0xbff60000u32,
        0x0f190a43u32,
        0x00975043u32,
        0xc9764000u32,
        0x1618003au32,
        0x00874d3au32,
        0xd4f60000u32,
        0x17180086u32,
        0x00cc6986u32,
        0xe0764000u32,
        0x1719005du32,
        0x00af575du32,
        0xecf64000u32,
        0x1818723cu32,
        0x0093503cu32,
        0xf9764000u32,
        0x1918003bu32,
        0x0088533bu32,
        0x05fc8000u32,
        0x16190057u32,
        0x008d6a57u32,
        0x117c8000u32,
        0x16190084u32,
        0x00cc7684u32,
        0x1a7c4000u32,
        0x0f19009eu32,
        0x00ec7b9eu32,
        0x27fc8000u32,
        0x1719001du32,
        0x005d471du32,
        0x33fc8000u32,
        0x16190029u32,
        0x00665529u32,
        0x3f7c8000u32,
        0x16190036u32,
        0x00706436u32,
        0x4afc8000u32,
        0x16190036u32,
        0x006f6436u32,
        0x567c8000u32,
        0x17190023u32,
        0x00674923u32,
        0x61fc8000u32,
        0x1619a639u32,
        0x00a24439u32,
        0x6d7c8000u32,
        0x16190056u32,
        0x00ca5456u32,
        0x78fc8000u32,
        0x16190063u32,
        0x00da5c63u32,
        0x847c8000u32,
        0x1619006bu32,
        0x00df646bu32,
        0x8ffc8000u32,
        0x16190070u32,
        0x00df6870u32,
        0x9b7c8000u32,
        0x16190075u32,
        0x00de6975u32,
        0xa6fc8000u32,
        0x1619008fu32,
        0x00e0808fu32,
        0xb27c8000u32,
        0x161900b8u32,
        0x00e6aab8u32,
        0xbc7cc000u32,
        0x1419009au32,
        0x00cc959au32,
        0xc8fc8000u32,
        0x17190653u32,
        0x00a15b53u32,
        0xd4fc8000u32,
        0x17190059u32,
        0x00b95859u32,
        0xe07c8000u32,
        0x1719a53au32,
        0x008f503au32,
        0xecfc8000u32,
        0x18190045u32,
        0x00915945u32,
        0xf7fcc000u32,
        0x19191a38u32,
        0x00835038u32
    ];
    let data_buffer = device.create_buffer_init(&wgpu::util::BufferInitDescriptor {
        label: Some("Data Buffer"),
        contents: bytemuck::cast_slice(&data_array),
        usage: wgpu::BufferUsages::STORAGE | wgpu::BufferUsages::COPY_DST,
    });
    let data_bind_group_layout = device.create_bind_group_layout(&wgpu::BindGroupLayoutDescriptor {
        label: Some("data_bind_group_layout"),
        entries: &[
            wgpu::BindGroupLayoutEntry {
                binding: 0,
                visibility: wgpu::ShaderStages::FRAGMENT,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Storage { read_only: true },
                    has_dynamic_offset: false,
                    min_binding_size: wgpu::BufferSize::new(data_array.len() as u64 * std::mem::size_of::<u32>() as u64),
                },
                count: None,
            },
        ],
    });
    let data_bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
        layout: &data_bind_group_layout,
        entries: &[
            wgpu::BindGroupEntry {
                binding: 0,
                resource: data_buffer.as_entire_binding(),
            },
        ],
        label: Some("data_bind_group"),
    });
    let time_bind_group_layout = device.create_bind_group_layout(&wgpu::BindGroupLayoutDescriptor {
        entries: &[
            wgpu::BindGroupLayoutEntry {
                binding: 0,
                visibility: wgpu::ShaderStages::FRAGMENT,
                ty: wgpu::BindingType::Buffer {
                    ty: wgpu::BufferBindingType::Uniform,
                    has_dynamic_offset: false,
                    min_binding_size: wgpu::BufferSize::new(std::mem::size_of::<f32>() as _),
                },
                count: None,
            },
        ],
        label: Some("time_bind_group_layout"),
    });
    let params_bind_group_layout = device.create_bind_group_layout(&wgpu::BindGroupLayoutDescriptor {
        label: Some("params_bind_group_layout"),
        entries: &[wgpu::BindGroupLayoutEntry {
            binding: 1,
            visibility: wgpu::ShaderStages::FRAGMENT,
            ty: wgpu::BindingType::Buffer {
                ty: wgpu::BufferBindingType::Uniform,
                has_dynamic_offset: false,
                min_binding_size: wgpu::BufferSize::new((std::mem::size_of::<f32>() * 6) as _),
            },
            count: None,
        }],
    });
    let pipeline_layout = device.create_pipeline_layout(&wgpu::PipelineLayoutDescriptor {
        label: Some("Pipeline Layout"),
        bind_group_layouts: &[
            &params_bind_group_layout,
            &time_bind_group_layout,
            &data_bind_group_layout,
        ],
        push_constant_ranges: &[],
    });
    let render_pipeline = wgpu::RenderPipelineBuilder::from_layout(&pipeline_layout, &vs_mod)
        .fragment_shader(&fs_mod)
        .color_format(format)
        .add_vertex_buffer::<Vertex>(&wgpu::vertex_attr_array![0 => Float32x2])
        .sample_count(sample_count)
        .build(device);
    let time_uniform = device.create_buffer(&wgpu::BufferDescriptor {
        label: Some("Time Uniform Buffer"),
        size: std::mem::size_of::<f32>() as wgpu::BufferAddress,
        usage: wgpu::BufferUsages::UNIFORM | wgpu::BufferUsages::COPY_DST,
        mapped_at_creation: false,
    });
    let time_bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
        layout: &time_bind_group_layout,
        entries: &[
            wgpu::BindGroupEntry {
                binding: 0,
                resource: time_uniform.as_entire_binding(),
            },
        ],
        label: Some("time_bind_group"),
    });
    let settings = Settings {
        lambda:-0.8,
        theta:255.0,
        alpha:14.0,
        sigma:0.001,
        gamma:1.0,
        blue:2.0,
        show_ui:true,
    };
    let params_data = [settings.lambda, settings.theta, settings.alpha,settings.sigma,settings.gamma,settings.blue];
    let params_bytes = bytemuck::cast_slice(&params_data);
    let params_uniform = device.create_buffer_init(&wgpu::util::BufferInitDescriptor {
        label: Some("Params Uniform"),
        contents: params_bytes,
        usage: wgpu::BufferUsages::UNIFORM | wgpu::BufferUsages::COPY_DST,
    });
    let params_bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
        layout: &params_bind_group_layout,
        entries: &[
            wgpu::BindGroupEntry {
                binding: 1,
                resource: params_uniform.as_entire_binding(),
            },
        ],
        label: Some("params_bind_group"),
    });
    let window = app.window(w_id).unwrap();
    let egui = Egui::from_window(&window);
    Model {
        params_bind_group,
        settings,
        params_uniform,
        egui,
        vertex_buffer,
        render_pipeline,
        time_uniform,
        time_bind_group,
        data_bind_group,
    }
}
fn view(app: &App, model: &Model, frame: Frame) {
    let draw = app.draw();
    draw.background().color(BLACK);
    let time = app.time; 
    let time_bytes = time.to_ne_bytes();
    let binding = app.main_window();
    let queue = binding.queue();
    {
        let mut encoder = frame.command_encoder();
        queue.write_buffer(&model.time_uniform, 0, &time_bytes);
        let mut render_pass = wgpu::RenderPassBuilder::new()
            .color_attachment(frame.texture_view(), |color| color)
            .begin(&mut encoder);
        render_pass.set_bind_group(0, &model.params_bind_group, &[]);
        render_pass.set_bind_group(1, &model.time_bind_group, &[]);
        render_pass.set_bind_group(2, &model.data_bind_group, &[]); 
        render_pass.set_pipeline(&model.render_pipeline);
        render_pass.set_vertex_buffer(0, model.vertex_buffer.slice(..));

        let vertex_range = 0..VERTICES.len() as u32;
        let instance_range = 0..1;
        render_pass.draw(vertex_range, instance_range);
    }
    if model.settings.show_ui {
        model.egui.draw_to_frame(&frame).unwrap();
    }
    if app.keys.down.contains(&Key::Space) {
        let file_path = app
            .project_path()
            .expect("failed to locate project directory")
            .join("frames")
            .join(format!("{:0}.png", app.elapsed_frames()));
        app.main_window().capture_frame(file_path);
    }
}
fn vertices_as_bytes(data: &[Vertex]) -> &[u8] {
    unsafe { wgpu::bytes::from_slice(data) }
}